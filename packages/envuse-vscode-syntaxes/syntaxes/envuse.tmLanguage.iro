name                                  = envuse
file_extensions []                    = envuse;

description                      = Envuse syntax


styles [] {
   .comments : style {
      color                           = #008000
      textmate_scope                  = comment
   }
   .comments_documentation: style {
      color                           = #008000
      textmate_scope                  = comment.block.documentation, comment
   }
   .variableKey : style {
      color                           = #0070C1
      textmate_scope                  = variable, variable.other
   }
   .variableValue : style {
      color                           = #A31515
      textmate_scope                  = string, string source
   }
   .spacial : style {
      color = "black";
      textmate_scope                  = constant.other.symbol
   }
   .statement : style {
      color = #AF00DB
      textmate_scope                  = comment.block.documentation
   }  
   .instance_name : style {
      color = #0070C1
      textmate_scope                  = variable, variable punctuation
   }
   .boolean : style {
      color = #0000FF
      textmate_scope                  = constant.language, constant.language.boolean
   }
   .number : style {
      color = #098658
      textmate_scope                  = constant.numeric
   }
   .string : style {
      color = #A31515
      textmate_scope                  = string
   }
   .null : style {
      color = #0000FF
      textmate_scope                  = constant.language,constant.language.null
   }
   .undefined : style {
      color = #0000FF
      textmate_scope                  = constant.language,constant.language.undefined
   }
   .err: style {
      color                           = red
      textmate_scope                  = none
   }
   .type: style {
      color                           = #267F99
      textmate_scope                  = support.type
   }
}


__variableKey = ([a-zA-Z0-9][a-zA-Z0-9_-]*)
__variableValue = ((?:\".*\")|(?:\'.*\')|(?:[^#]*))
__commentExpr = (?:(#\s*.*)?)

contexts[] {
   main : context {
      : inline_push {
         regex            \= ^(\s*#;\s*(?:if))
         styles []         = .comments;

         : eol_pop {}
         : include "sentences";
      }

      : inline_push {
         regex            \= ^(\s*###)
         styles []         = .comments_documentation;
         default_style     = .comments_documentation

         : pop {
            regex      \= (###\s*)$
            styles []   = .comments_documentation;
         }
      }

      : inline_push {
         regex      \= (#)
         styles []   = .comments;
         default_style     = .comments
         : eol_pop {}
      }

      : inline_push {
         regex            \= $${__variableKey}
         styles []         = .variableKey;
         : eol_pop {}
         
         : inline_push {
            regex            \= (:)
            styles []         = .spacial;
            default_style     = .err
            
            : pop {
               regex      \= $${__variableKey}
               styles []   = .type;
            }
         }
         
         : include "variable_part_value" ;
      }
   }
   
   variable_part_value : context {
      : inline_push {
         regex            \= (=)
         styles []         = .spacial;

         : eol_pop {}

         : inline_push {
            regex            \= $${__variableValue}
            styles []         = .variableValue;

            : eol_pop {}

            : inline_push {
               regex      \= $${__commentExpr}
               styles []   = .comments;
               default_style     = .err

               : eol_pop {}
            }
         }
      }
   }
   
   
   sentences : context {
      : inline_push {
         regex \= (")
         styles [] = .string;
         default_style = .string
         : pop {
            regex = (")
            styles [] = .string;
         }
      }
      : inline_push {
         regex \= (')
         styles [] = .string;
         default_style = .string
         : pop {
            regex = (')
            styles [] = .string;
         }
      }
      : pattern {
         regex \= (-?\d[\d_]*(.\d[\d_]*))
         styles = .number
      }
      : pattern {
         regex \= (true|false)
         styles [] = .boolean;
      }
      : pattern {
         regex \= (null)
         styles [] = .null;
      }
      : pattern {
         regex \= (undefined)
         styles [] = .undefined;
      }
      : pattern {
         regex \= $${__variableKey}
         styles [] = .instance_name;
         description = Variable Name
      }
      : pattern {
         regex \= (===)
         styles [] = .spacial;
         description = Symbol Equal
      }
   }
}