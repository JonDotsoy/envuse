// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EnvuseFileParser2 parse statement parse statement operation 1`] = `Object {}`;

exports[`EnvuseFileParser2 parse statement should parse comment operator correctly 1`] = `
Array [
  "Block (0, 32): #;if a.b.c.d ===
foo=\\"bar\\"
#;fi
",
  "CommentOperator (0, 31): #;if a.b.c.d ===
foo=\\"bar\\"
#;fi",
  "VariableKey (2, 4): if",
  "Space (4, 5):  ",
  "CommentOperatorStatement (5, 17): a.b.c.d ===
",
  "StatementObject<NameInstance> (5, 12): a.b.c.d",
  "Space (12, 13):  ",
  "StatementObject<StrictEquality> (13, 16): ===",
  "Block (17, 31): foo=\\"bar\\"
#;fi",
  "Variable (17, 26): foo=\\"bar\\"",
  "VariableKey (17, 20): foo",
  "SymbolEqual (20, 21): =",
  "VariableValue (21, 26): \\"bar\\"",
  "SpaceNewLine (26, 27): 
",
  "CommentOperator (27, 31): #;fi",
  "VariableKey (29, 31): fi",
  "SpaceNewLine (31, 32): 
",
]
`;

exports[`EnvuseFileParser2 parse statement should parse comment operator correctly 2`] = `
Array [
  "Block (0, 25): #;if true
foo=\\"bar\\"
#;fi
",
  "CommentOperator (0, 24): #;if true
foo=\\"bar\\"
#;fi",
  "VariableKey (2, 4): if",
  "Space (4, 5):  ",
  "CommentOperatorStatement (5, 10): true
",
  "StatementObject<Boolean> (5, 9): true",
  "Block (10, 24): foo=\\"bar\\"
#;fi",
  "Variable (10, 19): foo=\\"bar\\"",
  "VariableKey (10, 13): foo",
  "SymbolEqual (13, 14): =",
  "VariableValue (14, 19): \\"bar\\"",
  "SpaceNewLine (19, 20): 
",
  "CommentOperator (20, 24): #;fi",
  "VariableKey (22, 24): fi",
  "SpaceNewLine (24, 25): 
",
]
`;

exports[`EnvuseFileParser2 parse statement should parse comment operator correctly 3`] = `
Array [
  "Block (0, 24): #;if 123
foo=\\"bar\\"
#;fi
",
  "CommentOperator (0, 23): #;if 123
foo=\\"bar\\"
#;fi",
  "VariableKey (2, 4): if",
  "Space (4, 5):  ",
  "CommentOperatorStatement (5, 9): 123
",
  "StatementObject<Number> (5, 8): 123",
  "Block (9, 23): foo=\\"bar\\"
#;fi",
  "Variable (9, 18): foo=\\"bar\\"",
  "VariableKey (9, 12): foo",
  "SymbolEqual (12, 13): =",
  "VariableValue (13, 18): \\"bar\\"",
  "SpaceNewLine (18, 19): 
",
  "CommentOperator (19, 23): #;fi",
  "VariableKey (21, 23): fi",
  "SpaceNewLine (23, 24): 
",
]
`;

exports[`EnvuseFileParser2 parse statement should parse comment operator correctly 4`] = `
Array [
  "Block (0, 24): #;if var
foo=\\"bar\\"
#;fi
",
  "CommentOperator (0, 23): #;if var
foo=\\"bar\\"
#;fi",
  "VariableKey (2, 4): if",
  "Space (4, 5):  ",
  "CommentOperatorStatement (5, 9): var
",
  "StatementObject<NameInstance> (5, 8): var",
  "Block (9, 23): foo=\\"bar\\"
#;fi",
  "Variable (9, 18): foo=\\"bar\\"",
  "VariableKey (9, 12): foo",
  "SymbolEqual (12, 13): =",
  "VariableValue (13, 18): \\"bar\\"",
  "SpaceNewLine (18, 19): 
",
  "CommentOperator (19, 23): #;fi",
  "VariableKey (21, 23): fi",
  "SpaceNewLine (23, 24): 
",
]
`;

exports[`EnvuseFileParser2 parse statement should parse comment operator correctly 5`] = `
Array [
  "Block (0, 32): #;if foo === bar
foo=\\"bar\\"
#;fi
",
  "CommentOperator (0, 31): #;if foo === bar
foo=\\"bar\\"
#;fi",
  "VariableKey (2, 4): if",
  "Space (4, 5):  ",
  "CommentOperatorStatement (5, 17): foo === bar
",
  "StatementObject<NameInstance> (5, 8): foo",
  "Space (8, 9):  ",
  "StatementObject<StrictEquality> (9, 12): ===",
  "Space (12, 13):  ",
  "StatementObject<NameInstance> (13, 16): bar",
  "Block (17, 31): foo=\\"bar\\"
#;fi",
  "Variable (17, 26): foo=\\"bar\\"",
  "VariableKey (17, 20): foo",
  "SymbolEqual (20, 21): =",
  "VariableValue (21, 26): \\"bar\\"",
  "SpaceNewLine (26, 27): 
",
  "CommentOperator (27, 31): #;fi",
  "VariableKey (29, 31): fi",
  "SpaceNewLine (31, 32): 
",
]
`;

exports[`EnvuseFileParser2 parse statement should parse statement with numbers 1`] = `Object {}`;

exports[`EnvuseFileParser2 shoud make a ast out 1`] = `
" Block (0, 62):  abc=def # a comment
foo=bar

    
abc    =\\"d\\\\\\"ef\\" # comented
"
`;

exports[`EnvuseFileParser2 shoud make a ast with multiple blocks 1`] = `
" Block (0, 42): C=C
#;if true
a=a
#;if false
b=b
#;fi
#;fi"
`;

exports[`EnvuseFileParser2 shoud make a ast with operators 1`] = `
" Block (0, 43): FOO=BAR
#; if true
aaa=\\"bbb\\"
#; fi

ccc=ddd"
`;
