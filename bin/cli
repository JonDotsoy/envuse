#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const yargs = require('yargs');
const chalk = require('chalk');
const inquirer = require('inquirer');
const ConfigStore = require('../ConfigStore');
inquirer.registerPrompt('autocomplete', require('inquirer-autocomplete-prompt'));

async function copyFileEnv(args) {
    if (args.editor) {
        return require('../editor/server');
    }

    const cwd = process.cwd();

    const configStore = new ConfigStore({
        cwd,
    });

    // const files = readConfigs(cwd);
    const files = configStore.getConfigs();
    const outEnvFile = path.resolve(`${cwd}/.env`);

    if (files.length === 0) {
        return console.log(`No found configs`);
    }

    // console.log(files)

    console.log(`# ${cwd}`);

    const configs = files.map(e => e.groups.config);
    const configSelected = args.CONFIGFILE ? args.CONFIGFILE : await loadTheConfigSelected(configs);
    const config = loadConfigs(files, configSelected);

    console.log(`# copy ${config.fullpath} to`)
    console.log(`# ${outEnvFile}`)
    fs.writeFileSync(outEnvFile,
        Buffer.concat([
            Buffer.from(`# Copy from ${config.fullpath}\n`, 'utf8'),
            fs.readFileSync(config.fullpath),
        ])
    );
}

async function loadTheConfigSelected(configs) {
    const cav = await inquirer.prompt({
        type: 'autocomplete',
        message: 'Select config',
        name: 'configSelected',
        source: async (_, _input) => {
            return configs;
        },
    });
    const configSelected = cav.configSelected;
    return configSelected;
}

function loadConfigs(files, configSelected) {
    const configFound = files.find(f => f.groups.config === configSelected);

    if (!configFound) {
        throw new Error(chalk`Config {blue ${configSelected}} is not found`);
    }

    return configFound;
}

function readConfigs(cwd) {
    return fs.readdirSync(`${cwd}`)
        .map(fileName => {
            const result = /^\.(?<config>.*)\.env$/i.exec(fileName);
            if (result) {
                result.fullpath = path.resolve(`${cwd}/${result.input}`);
                return result;
            }
        }).filter(Boolean);
}

yargs.command({
    command: '$0 [CONFIGFILE]',
    builder: {
        editor: {
            describe: 'Edit the config file',
            boolean: true,
        },
    },
    handler: copyFileEnv,
});

yargs.argv;
